#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <conio.h>
#include <cwchar>
#include <ctime>
#include <windows.h>
#include <fstream>

using namespace std;

ofstream g("thing.out");

///map_arr[cursorX][cursorY][0] holds the number of the block ,-1 meaning that there is a bomb
///map_arr[cursorX][cursorY][1] = 0 means undiscovered block
///map_arr[cursorX][cursorY][1] = 1 means discovered block
///map_arr[cursorX][cursorY][1] = 2 flagged block



bool enter = 0, gameOver = false, flag = false;
unsigned int cursorX = 14, cursorY = 14;
enum eDirection {STOP, LEFT, RIGHT, UP, DOWN};
eDirection dir;

unsigned long long int scale = 30, no_bomb = 80;
long long int map_arr[30][30][2];
unsigned long long int  bomb[80][2], flood[30*30-80][3];/// number
                                                        /// x coordinate
                                                        /// y coordinate


void FloodFill()
{
    if (map_arr[cursorX][cursorY][0] > 0)
        return;

    unsigned long long int n = scale * scale - no_bomb;

    flood[0][0] = 1;
    flood[0][1] = cursorX;
    flood[0][2] = cursorY;


    int x,y;
    int j = 1, i = 0;;
    while(true)
    {
        x = flood[j][1];
        y = flood[j][2];


        if(y-1>=0 and  !map_arr[x][y-1][0] and !map_arr[x][y-1][1]){
            flood[j][0] = j;
            flood[j][1] = x;
            flood[j][2] = y-1;
            map_arr[x][y-1][1] = 1;
            j++;
        }
        ///****************************************///
        if(y-1>=0 and x+1<scale and  !map_arr[x+1][y-1][0] and !map_arr[x+1][y-1][1]){
            flood[j][0] = j;
            flood[j][1] = x+1;
            flood[j][2] = y-1;
            map_arr[x+1][y-1][1] = 1;
            j++;
        }
        ///****************************************///
        if(x+1<scale and !map_arr[x+1][y][0] and !map_arr[x+1][y][1]){
            flood[j][0] = j;
            flood[j][1] = x+1;
            flood[j][2] = y;
            map_arr[x+1][y][1] = 1;
            j++;
        }
        ///****************************************///
        if(y+1<scale and x+1<scale and  !map_arr[x+1][y+1][0] and !map_arr[x+1][y+1][1]){
            flood[j][0] = j;
            flood[j][1] = x+1;
            flood[j][2] = y+1;
            map_arr[x+1][y+1][1] = 1;
            j++;
        }
        ///****************************************///
        if(y+1<scale and !map_arr[x][y+1][0] and !map_arr[x][y+1][1]){
            flood[j][0] = j;
            flood[j][1] = x;
            flood[j][2] = y+1;
            map_arr[x][y+1][1] = 1;
            j++;
        }
        ///****************************************///
        if(y+1<scale and x-1>=0 and  !map_arr[x-1][y+1][0] and !map_arr[x-1][y+1][1]){
            flood[j][0] = j;
            flood[j][1] = x-1;
            flood[j][2] = y+1;
            map_arr[x-1][y+1][1] = 1;
            j++;
        }
        ///****************************************///
        if(x-1>=0 and !map_arr[x-1][y][0] and !map_arr[x-1][y][1]){
            flood[j][0] = j;
            flood[j][1] = x-1;
            flood[j][2] = y;
            map_arr[x-1][y][1] = 1;
            j++;
        }
        ///****************************************///
        if(y-1>=0 and x-1>=0 and  !map_arr[x-1][y-1][0] and !map_arr[x-1][y-1][1]){
            flood[j][0] = j;
            flood[j][1] = x-1;
            flood[j][2] = y-1;
            map_arr[x-1][y-1][1] = 1;
            j++;
        }

        if (!flood[j-1][0]){
           break;
        }
        i++;
        j--;

    }

//    g << "j=" << j << endl;
//    for (int i = 0; i <= n; i++)
//    {
//        g<<"flood["<<i<<"][0] =" <<flood[i][0]<<endl;
//        g<<"flood["<<i<<"][0] =" <<flood[i][1]<<endl;
//        g<<"flood["<<i<<"][0] =" <<flood[i][1]<<endl << endl;
//    }
    /// this is buggy as hell
    /*
    flood[0][0] = 1;
    while(true)
    {
        if (flood[i][0] == 0)
            break;

        x = flood[i][1];
        y = flood[i][2];

        if(map_arr[x][y-1][0]>0)
            map_arr[x][y-2][1] = 1;

        if(map_arr[x-1][y-1][0]>0)
            map_arr[x-1][y-1][1] = 1;

        if(map_arr[x+1][y-1][0]>0)
            map_arr[x+1][y-1][1] = 1;

        if(map_arr[x-1][y][0]>0)
            map_arr[x-1][y][1] = 1;

        if(map_arr[x+1][y][0]>0)
            map_arr[x+1][y][1] = 1;

        if(map_arr[x-1][y+1][0]>0)
            map_arr[x-1][y+1][1] = 1;

        if(map_arr[x+1][y+1][0]>0)
            map_arr[x+1][y+1][1] = 1;

        if(map_arr[x][y+1][0]>0)
            map_arr[x][y+1][1] = 1;

        i++;
    }

    ///

/*

    /// deletes the data
    while (flood[j][0])
    {
        flood[i][0] = 0;
        flood[i][1] = 0;
        flood[i][2] = 0;
        i++;
     }
*/

}


void logic()
{
    //control movement
    if (dir == LEFT)
        cursorX--;
    else if (dir == RIGHT)
        cursorX++;
    else if (dir == UP)
        cursorY--;
    else if (dir == DOWN)
        cursorY++;
    //end of control movement

    if (enter == true){
        if(map_arr[cursorX][cursorY][0] == -1 and map_arr[cursorX][cursorY][1] != 1)
            gameOver = true;

        map_arr[cursorX][cursorY][1] = 1;
        FloodFill();
        enter = false;
    }

    if (flag ==  true){
        if(map_arr[cursorX][cursorY][1] == 0)
            map_arr[cursorX][cursorY][1] = 2;

        else if (map_arr[cursorX][cursorY][1] = 2)
            map_arr[cursorX][cursorY][1] = 0;

        flag = false;
    }



}

void graphics()
{
    system("CLS");
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    for ( int y = 0; y < scale; y++)
    {
        for (int x = 0; x < scale; x++)
        {
            SetConsoleTextAttribute(hConsole, 7);

//                if (cursorX == x and cursorY == y)
//                    SetConsoleTextAttribute(hConsole, 2);

                if(map_arr[x][y][1] == 0){
                    if(cursorX == x and cursorY == y)
                        SetConsoleTextAttribute(hConsole, 2);
                    else
                        SetConsoleTextAttribute(hConsole, 4);
                    cout << "H ";
                }
                else if (map_arr[x][y][1] == 1){
                    if(cursorX == x and cursorY == y)
                        SetConsoleTextAttribute(hConsole, 2);
                    else if(!map_arr[x][y][0])
                        SetConsoleTextAttribute(hConsole, 3);
                    else
                        SetConsoleTextAttribute(hConsole, 1);

                    cout << map_arr[x][y][0]<<" ";
                }
                else if (map_arr[x][y][1] == 2){
                    if(cursorX == x and cursorY == y)
                        SetConsoleTextAttribute(hConsole, 2);
                    else
                        SetConsoleTextAttribute(hConsole, 5);
                    cout << "F ";
                }

            SetConsoleTextAttribute(hConsole, 7);
        }
        cout << endl;
    }
}

int control()
{

    if (_kbhit())
    {
        dir = STOP;
        switch (_getch())
        {
            case 'a':
                    dir = LEFT;
                break;

            case 's':
                    dir = DOWN;
                break;

            case 'd':
                    dir = RIGHT;
                break;

            case 'w':
                    dir = UP;
                break;

            case 'k':
                enter = true;
                break;
            case 'f':
                flag = true;
                break;


            case 'A':
                    dir = LEFT;
                break;

            case 'S':
                    dir = DOWN;
                break;

            case 'D':
                    dir = RIGHT;
                break;

            case 'W':
                    dir = UP;
                break;

            case 'K':
                enter = true;
                break;
            case 'F':
                flag = true;
                break;

        }
    return 1;
    }
}

void start_game()
{
   // unsigned int x , y;
   //bomb generator
   cout << "creating the start layout"<< endl;
    bool ok = 0;
            int bombX;
            int bombY;
    for (int i = 0; i < no_bomb; i++)
    {
        system("CLS");
        cout <<  (i*100)/no_bomb<<"% done"<< endl;
        //this do while checks if it placed a bomb on the same spot as another spot
        do{

            bomb[i][0] = rand()% scale;
            bomb[i][1] = rand()% scale;
            for (int j = 0; j < i; j++)
            {
                ok = 0;
                if(bomb[j][0] == bomb[i][0] and bomb[j][1] == bomb[i][1])
                    ok = 1;
            }
        }while (ok == 1);

        map_arr[bomb[i][0]][bomb[i][1]][0] = -1;




//        int bombX = bomb[i][0];
//        int bombY = bomb[i][1];
            bombX = bomb[i][0];
            bombY = bomb[i][1];

            if (bombY-1>=0){
                if(bombX-1>=0 and map_arr[bombX-1][bombY-1][0] != -1)
                    map_arr[bombX-1][bombY-1][0]++;

                if(map_arr[bombX][bombY-1][0] != -1)
                    map_arr[bombX][bombY-1][0]++;

                if(bombX+1<scale and map_arr[bombX+1][bombY-1][0] != -1)
                    map_arr[bombX+1][bombY-1][0]++;
            }

            if(bombX-1>=0 and map_arr[bombX-1][bombY][0] != -1)
                map_arr[bombX-1][bombY][0]++;
            if(bombX+1<scale and map_arr[bombX+1][bombY][0] != -1)
                map_arr[bombX+1][bombY][0]++;

            if (bombY+1<scale){
                if(bombX-1>=0 and map_arr[bombX-1][bombY+1][0] != -1)
                    map_arr[bombX-1][bombY+1][0]++;

                if (map_arr[bombX][bombY+1][0] != -1)
                    map_arr[bombX][bombY+1][0]++;

                if(bombX+1<scale and map_arr[bombX+1][bombY+1][0] != -1)
                    map_arr[bombX+1][bombY+1][0]++;
            }
    }
    cout <<"100% done"<< endl;
    system("CLS");
 }


int main()
{

    srand(time(0));
    start_game();
    cout <<"   READY TO PLAY???"<< endl;
    cout <<"   IF SO PRESS ANY BUTTON TO PLAY"<< endl;

    while (gameOver == false){
        if( control()){
            logic();
            graphics();
        }
    }
    return 0;
}
